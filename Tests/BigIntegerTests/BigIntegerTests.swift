import XCTest
@testable import BigInteger

final class BigIntegerTests: XCTestCase {
    func testPublicInitFromStr() {
        let a = BigInteger(from:
                "0000000000000000000000000000000000000612361193061935861237")
        XCTAssertEqual(a.mag, [1125502453, 842529961, 33])
        XCTAssertEqual(a.signum, true)

        let b = BigInteger(from: "-0006123611930619358612362")
        XCTAssertEqual(b.mag, [2665089930, 4130332316, 331])
        XCTAssertEqual(b.signum, false)

        let c = BigInteger(from: "0")
        XCTAssertEqual(c.mag, [0])
        XCTAssertEqual(c.signum, true)
    }

    func testAddMagT1() {
        let a = BigInteger(from: "612361193061935861237")
        let b = BigInteger(from: "61935861237")
        //c_mag = [3138768373, 3505532565, 28376639]
        let c = BigInteger(from: "523456612361193061935861237")
        //d_mag = [1946157056, 1340620830, 27105054]
        let d = BigInteger(from: "500000000000000000000000000")
        XCTAssertEqual(BigInteger.add(mag1: a.mag, mag2: b.mag),
                       [2931821546, 842529975, 33])
        XCTAssertEqual(BigInteger.add(mag1: c.mag, mag2: c.mag),
                       [1982569450, 2716097835, 56753279])
        XCTAssertEqual(BigInteger.add(mag1: d.mag, mag2: d.mag),
                       [3892314112, 2681241660, 54210108])

    }

    func testSubtractMagT1() {
        let a = BigInteger(from: "612361193061935861237")
        let b = BigInteger(from: "61935861237")
        let c = BigInteger(from: "523456612361193061935861237")
        let d = BigInteger(from: "500000000000000000000000000")
        XCTAssertEqual(BigInteger.subtract(mag1: a.mag, mag2: b.mag),
                       [3614150656, 842529946, 33])
        XCTAssertEqual(BigInteger.subtract(mag1: c.mag, mag2: d.mag),
                       [1192611317, 2164911735, 1271585])
        XCTAssertEqual(BigInteger.subtract(mag1: d.mag, mag2: d.mag), [0])

    }

    func testMulMagT1() {
        let a = BigInteger(from: "612361193061935861237")
        let b = BigInteger(from: "61935861237")
        let c = BigInteger(from: "523456612361193061935861237")
        let d = BigInteger(from: "500000000000000000000000000")

        XCTAssertEqual(BigInteger.multiply(mag1: a.mag, mag2: b.mag),
                       [2443410553, 2573930479, 3038812614, 478])
        XCTAssertEqual(BigInteger.multiply(mag1: c.mag, mag2: d.mag),
            [67108864, 2044281865, 1819053428, 197960665, 3325078967, 179081])
        XCTAssertEqual(BigInteger.multiply(mag1: c.mag, mag2: [0]), [0])
    }

    func testDivMagT1() {
        let a = BigInteger(from: "612361193061935861237")
        let b = BigInteger(from: "61935861237")
        let c = BigInteger(from: "523456612361193061935861237")
        let d = BigInteger(from: "500000000000000000000000000")

        //hack, should be fixed in division(mag1:_, mag2:_) v1.1b1
        let e = BigInteger(from: "612361193061935861237324234354353452352542352435435252435453")
        let f = BigInteger(from: "1000000000000000000")

        XCTAssertEqual(BigInteger.divide(mag1: e.mag, mag2: f.mag).0, [4274521118, 267499566, 3951190577, 2438715792, 1799, 0])
        XCTAssertEqual(BigInteger.divide(mag1: a.mag, mag2: b.mag).0, [1297086930, 2])
        XCTAssertEqual(BigInteger.divide(mag1: a.mag, mag2: b.mag).1, [2341514747, 6])
        XCTAssertEqual(BigInteger.divide(mag1: c.mag, mag2: d.mag).0, [1])
        XCTAssertEqual(BigInteger.divide(mag1: c.mag, mag2: d.mag).1, [1192611317, 2164911735, 1271585])
    }

    func testStringConvertible() {
        let a = BigInteger(from: "612361193061935861237")
        XCTAssertEqual(String(a), "612361193061935861237")
        let b = BigInteger(from: "-612361193061935861237324234354353452352542352435435252435453")
        XCTAssertEqual(String(b), "-612361193061935861237324234354353452352542352435435252435453")
        XCTAssertEqual(String(BigInteger(from: "0")), "0")
    }

    func testAddT1() {
        let a = BigInteger(from: "0000000000000000000000000000000000000612361193061935861237")
        let b = BigInteger(from: "-6123611930619358612362")
        let c = BigInteger(from: "-612361193061935861237")
        let d = BigInteger(from: "6123611930619358612362")

        XCTAssertEqual((a + a).mag, BigInteger(from: "1224722386123871722474").mag)
        XCTAssertEqual((a + a).signum, BigInteger(from: "1224722386123871722474").signum)

        XCTAssertEqual(String(a + b), "-5511250737557422751125")
        XCTAssertEqual(String(c + d), "5511250737557422751125")
    }

    func testSubtractT1() {
        let a = BigInteger(from: "612361193061935861237")
        let b = BigInteger(from: "-6123611930619358612362")
        let c = BigInteger(from: "-612361193061935861237")
        let d = BigInteger(from: "6123611930619358612362")

        XCTAssertEqual(String(a - a), "0")
        XCTAssertEqual(String(a - b), "6735973123681294473599")

        XCTAssertEqual(String(c - c), "0")
        XCTAssertEqual(String(c - d), "-6735973123681294473599")
    }

    func testMultiplyT1() {
        let a = BigInteger(from: "612361193061935861237")
        let b = BigInteger(from: "-6123611930619358612362")
        XCTAssertEqual(String(a * b), "-3749862307682374847564897134347193704811794")
        XCTAssertEqual(String(a * a), "374986230768237484756979602389168919170169")
        XCTAssertEqual(String(a * BigInteger(from: "0")), "0")
    }

    func testDivideT1() {
        let a = BigInteger(from: "-612361193061935861237")
        let b = BigInteger(from: "6123611930619358612362")
        XCTAssertEqual(String(a / a), "1")
        XCTAssertEqual(String(a / b), "0")
        XCTAssertEqual(String(b / a), "-9")
    }
    
    let bigNumA = "60521672074906160092921129976533027916807972783288640690417517816323220969834677638088012840834215147852015491066068785490695509945563119621542383371687687587225054942847812793632810372290857363109752157283959917798432949276506089500816279585198822958945204550238038699462191979562919100381119056819287327183319045527793484616425268318449026955106478454087806965067655462497289279716425810047300331821098106605692769858359090344223065263590977571037876420142663259928763459253858797204268726244733746954690077322262591003726802018910321210530688819361327839958922169248840279348754073010682511751023628906873531052419458208048953549299823939005891112462676748198684599838146862974865400741025106480094940595498138333689113670992095866933736166392960018471607050779322549842524809375739086320971161461366968705753113341748603533403501465311872984004112262980449619185011810188767618852942255447378544698432986543773130934435981743060267819313324906821893837587889283491909180446083342020746509280882230787076566780947396943142582014432899687215224899065427788715214354252779842658399764655168669859264987013304912483275414963203716510653380542791259024526844379265179825164932533840391306674956308352462684651442092880605257649177047977275452078805769385113879439660871245912171196158502941483014311494137227539776283013323013363280217776672478476615694773398702510861477240238217853777548597612340510357926100511990883934590921959571840635138309866265864090928469194979178684077427504556306854872507441326107277207193699981445427855844585160567575169835129399405894992212500289569825899183047964695162713980241631206115790422969733398016825233764492423871192656719320603510243762524981914263061684198769067845733008802042552524065352236336406016005508695701644730041982738519799411235750292083709184583232312871001277452083264654413809303254016592172931072667555889324385652020432690830768801466131892935769193081427520079744467783144730996290338862274003979027355905065795406718968537598324681403200486883656731957520694087374476852196895976845554"
    let bigNumB = "94071234580375063714710967742550969581383630403158064506131505784960851975142974440213813538503373139480592674015458400770121243511380941416181183685765481285567851133418939803546815351776236255137619684715062660868753305990883655804483706051280230932669086063985744576979198780046189260878099579770122551287913392104960744563209550684169531881520840660397052694482531502495977580810810936722277710257206143805784472137872450636636740417038072935515282206571837004268824542487696994821982255269773709164948476016312922807040806891523212258625244294142578011003548205569651892661802114373295813403833927670300106199451985431614755524787989638718465792363413846834026218468653114669417317332471650378106051901266754829959429414996613753645282214596245590520815699859568022000145942930863054841828002165714116006253750660677573260480966339451684426126000354390506744145620882541347932258920251757128161907372976668807861061323230254111403472387861866277727995602215322659423197600820542125822556594277559553074975868684809901362560990408511586171893843603468356356481444619696697001187645247336348573058662915479789280320394891477672621015514072472102454539706969894927303404745773275775882899460995799495843550190946607966830315981614589608368483468230660260545487534908530896715003963674789183951812441165659830468987970396002654244304309403917178593376217964176894977910921250298927060874163279629846437528803996289602361583994904130865348506315677199510893879176870192055580010734708641644345085615783719132956765797531244943955042391085869641708107536811256757889609124709435400297910326674590976729766473833774899773241239554645129490157952278220813299279215091733353491108118155723131301739018411304090507576278206087268640304860774694667442601908581033007821756302554630112324472941369699511956905386492858996543290479390840493926675928203460437744590702628300500136580316929326338159294592728803928148450075617362946192147363633503446843322010083050381792589174851060948646435035006967581837560517909786136546307915063422254170504536959957700"
    
}
